name: Build and Release

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  build:
    name: Build and Publish CLI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - { os: windows-latest, platform: win-x86 }
          - { os: windows-latest, platform: win-x64 }
          - { os: windows-latest, platform: win-arm64 }
          - { os: ubuntu-latest, platform: linux-x64 }
          - { os: ubuntu-latest, platform: linux-arm }
          - { os: ubuntu-latest, platform: linux-arm64 }
          - { os: macos-latest, platform: osx-x64 }
          - { os: macos-latest, platform: osx-arm64 }

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0      

      - name: Save Version
        run: echo "PROJECT_VERSION=$(grep -oP '(?<=<VersionPrefix>).*?(?=</VersionPrefix>)' ./Relational2Rdf.Cli/Relational2Rdf.Cli.csproj)" >> $GITHUB_ENV 
        shell: bash
      
      - name: Publish Application
        run: dotnet publish Relational2Rdf.Cli/Relational2Rdf.Cli.csproj -o ${{ github.workspace }}/output --configuration Release --runtime ${{ matrix.platform }} --self-contained true /p:PublishSingleFile=true /p:IncludeNativeLibrariesForSelfExtract=true
        shell: bash

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: siard2rdf-${{ matrix.platform }}
          path: ${{ github.workspace }}/output/*

    outputs:
      project-version: ${{ env.PROJECT_VERSION }}
  
  create-release:
    needs: build
    runs-on: ubuntu-latest
    steps:

      - name: Output Version
        run: echo ${{ needs.build.outputs.project-version }}
        shell: bash
      - id: create-release-step
        name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.project-version }}
          release_name: Release v${{ needs.build.outputs.project-version }}
          draft: false
          prerelease: false
    outputs:
      release-upload-url: ${{ steps.create-release-step.outputs.upload_url }}
          
  upload-release-binaries:
    needs: create-release
    name: Upload Binaries to release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - { os: windows-latest, platform: win-x86, extension: .exe }
          - { os: windows-latest, platform: win-x64, extension: .exe }
          - { os: windows-latest, platform: win-arm64, extension: .exe }
          - { os: ubuntu-latest, platform: linux-x64, extension: "" }
          - { os: ubuntu-latest, platform: linux-arm, extension: "" }
          - { os: ubuntu-latest, platform: linux-arm64, extension: "" }
          - { os: macos-latest, platform: osx-x64, extension: .app }
          - { os: macos-latest, platform: osx-arm64, extension: .app }
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: siard2rdf-${{ matrix.platform }}
          path: ${{ github.workspace }}/${{ matrix.platform }}
      - name: Zip
        run: zip -j assets.zip ${{ github.workspace }}/${{ matrix.platform }}/*
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.release-upload-url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: assets.zip
          asset_name: siard2rdf-${{ matrix.platform }}.zip
          asset_content_type: application/zip
